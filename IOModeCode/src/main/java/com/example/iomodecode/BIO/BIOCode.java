package com.example.iomodecode.BIO;

/**
 * IO模型：就是用什么样的通道进行数据的发送和接受，很大程度上决定了程序通信的性能
 * Java支持3种网络编程模型IO模式：BIO（同步并阻塞），NIO（同步非阻塞），AIO（异步非阻塞）
 *
 * BIO（同步并阻塞）
 * java BIO就是传统的socket编程：
 *  BIO（blocking I/O）：
 *      同步阻塞，服务器实现模式为一个线程一个链接，即客户端有请求时服务端就需要启动一个线程处理，如果这个线程不做任何事情会造成不必要的开销，可以通过线程池机制改善。
 *  BIO问题分析：
 *      1.每个请求都需要创建独立的线程，与对应的客户端进行数据的read，业务处理，数据write
 *      2.并发量大时,需要创建大量的线程来处理连接,系统资源占用大
 *      3.连接建立后,如果暂时没有数据可读,会阻塞在read上,造成资源浪费
 *
 * NIO (同步非阻塞)
 *      NIO（non blocking I/O）：
 *      同步非阻塞,服务器实现模式为一个线程处理多个请求(连接),即客户端发送的连接请求都会注册到多路复用器上,多路复用器轮询到哪个客户端连接有I/O请求就进行处理
 *
 * AIO（异步非阻塞）
 *      AIO引入异步通道的概念，采用了Proactor模式，简化了程序编写，有效的请求才启动线程，它的特点是先有操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。
 */
public class BIOCode {

}
